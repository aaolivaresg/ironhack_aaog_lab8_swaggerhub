/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.63).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ironhack.ecomerce;

import io.swagger.model.CustomerTicket;
import io.swagger.model.Order;
import io.swagger.model.Product;
import io.swagger.model.UserPersonalData;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-11-12T23:41:18.210738873Z[GMT]")
@Validated
public interface DefaultApi {

    @Operation(summary = "Obtener todos los pedidos", description = "Devuelve una lista de todos los pedidos.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de pedidos", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))) })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Order>> ordersGet() throws Exception;


    @Operation(summary = "Obtener un pedido específico", description = "Devuelve los detalles de un pedido en base al ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Detalle del pedido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "404", description = "Pedido no encontrado") })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> ordersOrderIdGet(@Parameter(in = ParameterIn.PATH, description = "ID del pedido", required=true, schema=@Schema()) @PathVariable("orderId") String orderId
) throws Exception;


    @Operation(summary = "Actualizar un pedido", description = "Actualiza los detalles de un pedido específico.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Pedido actualizado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "404", description = "Pedido no encontrado") })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Order> ordersOrderIdPut(@Parameter(in = ParameterIn.PATH, description = "ID del pedido a actualizar", required=true, schema=@Schema()) @PathVariable("orderId") String orderId
, @Parameter(in = ParameterIn.DEFAULT, description = "Datos actualizados del pedido", required=true, schema=@Schema()) @Valid @RequestBody Order body
) throws Exception;


    @Operation(summary = "Crear un nuevo pedido", description = "Crea un nuevo pedido en el sistema.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Pedido creado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en la solicitud, datos inválidos") })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Order> ordersPost(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto del pedido a crear", required=true, schema=@Schema()) @Valid @RequestBody Order body
) throws Exception;


    @Operation(summary = "Obtener todos los productos", description = "Devuelve una lista de productos disponibles en la tienda.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de productos", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))) })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Product>> productsGet() throws Exception;


    @Operation(summary = "Agregar un nuevo producto", description = "Crea un nuevo producto en la tienda.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Producto creado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en la solicitud, datos inválidos") })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Product> productsPost(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto de producto a agregar", required=true, schema=@Schema()) @Valid @RequestBody Product body
) throws Exception;


    @Operation(summary = "Eliminar un producto", description = "Elimina un producto específico de la tienda.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Producto eliminado exitosamente"),
        
        @ApiResponse(responseCode = "404", description = "Producto no encontrado") })
    @RequestMapping(value = "/products/{productId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> productsProductIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID del producto a eliminar", required=true, schema=@Schema()) @PathVariable("productId") String productId
) throws Exception;


    @Operation(summary = "Obtener un producto específico", description = "Devuelve la información detallada de un producto.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Detalle del producto", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
        
        @ApiResponse(responseCode = "404", description = "Producto no encontrado") })
    @RequestMapping(value = "/products/{productId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Product> productsProductIdGet(@Parameter(in = ParameterIn.PATH, description = "ID del producto", required=true, schema=@Schema()) @PathVariable("productId") String productId
) throws Exception;


    @Operation(summary = "Actualizar un producto existente", description = "Actualiza los datos de un producto específico.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Producto actualizado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
        
        @ApiResponse(responseCode = "404", description = "Producto no encontrado") })
    @RequestMapping(value = "/products/{productId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Product> productsProductIdPut(@Parameter(in = ParameterIn.PATH, description = "ID del producto a actualizar", required=true, schema=@Schema()) @PathVariable("productId") String productId
, @Parameter(in = ParameterIn.DEFAULT, description = "Objeto del producto con los datos a actualizar", required=true, schema=@Schema()) @Valid @RequestBody Product body
) throws Exception;


    @Operation(summary = "Obtener todos los tickets de soporte", description = "Devuelve una lista de tickets de soporte generados por los clientes.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de tickets de soporte", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CustomerTicket.class)))) })
    @RequestMapping(value = "/support/tickets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CustomerTicket>> supportTicketsGet() throws Exception;


    @Operation(summary = "Crear un nuevo ticket de soporte", description = "Permite que un cliente cree un nuevo ticket de soporte.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ticket creado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerTicket.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en la solicitud, datos inválidos") })
    @RequestMapping(value = "/support/tickets",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CustomerTicket> supportTicketsPost(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto del ticket de soporte a crear", required=true, schema=@Schema()) @Valid @RequestBody CustomerTicket body
) throws Exception;


    @Operation(summary = "Obtener todos los usuarios", description = "Devuelve una lista de todos los perfiles de usuario registrados.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de usuarios", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserPersonalData.class)))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserPersonalData>> usersGet() throws Exception;


    @Operation(summary = "Crear un nuevo usuario", description = "Registra un nuevo perfil de usuario en el sistema.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Usuario creado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserPersonalData.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en la solicitud, datos inválidos") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UserPersonalData> usersPost(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto del usuario a crear", required=true, schema=@Schema()) @Valid @RequestBody UserPersonalData body
) throws Exception;


    @Operation(summary = "Eliminar un usuario", description = "Elimina un usuario específico del sistema.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Usuario eliminado exitosamente"),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado") })
    @RequestMapping(value = "/users/{userId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> usersUserIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID del usuario a eliminar", required=true, schema=@Schema()) @PathVariable("userId") String userId
) throws Exception;


    @Operation(summary = "Obtener un usuario específico", description = "Devuelve el perfil de un usuario en base al ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Perfil de usuario", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserPersonalData.class))),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado") })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserPersonalData> usersUserIdGet(@Parameter(in = ParameterIn.PATH, description = "ID del usuario", required=true, schema=@Schema()) @PathVariable("userId") String userId
) throws Exception;

}

